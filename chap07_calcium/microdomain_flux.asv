% code to solve the microdomain flux equations

%   For Chapter 7, Section 7.6 of
%   Keener and Sneyd, Mathematical Physiology, 3rd Edition, Springer.
% 
%   Written by James Keener and James Sneyd.
% 
%  ------------------------------------------------------------------- 

clear all
close all
clc
set(0,                           ...
    'defaultaxesfontsize', 20,   ...
    'defaultaxeslinewidth', 2.0, ...
    'defaultlinelinewidth', 2.0);
global Kb cinf einf Dc De Dbbt pfac
% parameters
Kb = 1;
Dc = 1;
De = 1;
Dbbt = 0.4;
pfac = 0.1;
cinf = 1;
einf = 4;
c = [cinf:.01:einf];
eans=cinf*ones(1,length(c));

J=fluxw(c);
e =[cinf:0.001:einf];
Je = fluxv(e);
for j = 1:length(c)
    test = (Je(1:end-1)-J(j)).*(Je(2:end)-J(j));
    
    ndx = find(test<0);
    if( ~isempty(ndx))
    eans(j) = e(ndx);
    end
end

plot(c,eans-c-J)
test = eans-c-J;
comp = test(1:end-1).*test(2:end);
ndx 

function [wout,wpout] = w(c)
global Dc Dbbt Kb 

wout = Dc*c+Dbbt*c./(Kb+c);
wpout = Dc+Dbbt*Kb./(Kb+c).^2;
end

function [vout,vpout] = v(c)
global De Dbbt Kb 

vout = De*c+Dbbt*c./(Kb+c);
vpout = De+Dbbt*Kb./(Kb+c).^2;
end



function out = fluxw(c)
global Dc cinf pfac
[winf,wpinf]=w(cinf);

[w0,wp0] = w(c);
out = Dc*pfac*(w0-winf )./wp0;
end

function out = fluxv(c )
    global De einf pfac
[vinf,vpinf]=v(einf);

[v0,vp0] = v(c);
out = De*pfac*(vinf-v0)./vp0;
end

 
%%%%%%%%%%%%%%%%%%%%%%%
% this is the bisection algorithm
function root = bisect(feval,a,b)

ul = a;
fl = feval(ul);
uu = b;
fu = feval(uu);

% we make the assumption, without checking, that 
% fu*fl<0

% if not, the algoritm fails to find a root.

N = 25;  % number of iterates
% the main bisection algorithm
for j = 1:N
u = (ul+uu)/2;
fc = feval(u);
ftest = (fc*fl>=0);
ul = ftest*u+(1-ftest)*ul;
fl = ftest*fc + (1-ftest)*fl;

uu = (1-ftest)*u+ ftest*uu;
fu = (1-ftest)*fc + ftest*fu;
end
root = u;
end

