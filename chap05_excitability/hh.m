%%  -------------------------------------------------------------------%%  This is an ode integrator for the Hodgkin-Huxley equations.%%   For Chapter 5, Fig. 5.6 of%   Keener and Sneyd, Mathematical Physiology, 3rd Edition, Springer.%%   Written by James Keener and James Sneyd%%  -------------------------------------------------------------------function hhclear allclose allclcset(0,                           ...   'defaultaxesfontsize', 20,   ...   'defaultaxeslinewidth', 2.0, ...   'defaultlinelinewidth', 2.0);% set parameters%p.Veq = 0; %is the original HH formulationp.Veq = -65; % is the physiological formulation resting potential% the resting potentialTmin = -273.15;  % absolute zero temperatureTc = 6.3; %the temperature for the original HH modelp.gnabar = 120.;p.gkbar = 36;p.gl = 0.3;%These are the Nernst potentials:VNa = 50; % the sodium Nernst potentialVK = -77;  % the potassium Nernst potentialVL = -54.4;  % the leak Nernst potentialp.vna = VNa - p.Veq;p.vk = VK-p.Veq;p.vl = VL -p.Veq;p.Iapp =  0;  % change the applied current here % other possible values: %p.Iapp = 20; %p.Iapp = 140;% initial datav0 = 7+p.Veq;%v0=p.Veq;m = 0.0529;h = 0.5961;n = 0.3177;s0 = [v0;m;h;n];%specify the output pointststep = .01;if (p.Iapp>0)    tend = 60;else    tend = 20;endtspan = [0:tstep:tend];[T,S] = ode23(@(t,x)deRHS(t,x,p),tspan, s0, odeset('maxstep',1));V = S(:,1);  % V is the membrane potentialv=V-p.Veq;   % v is the deviation of potential from restm = S(:,2);h = S(:,3);n = S(:,4);S(end,1)% currentsgna=p.gnabar*m.^3.*h;gk=p.gkbar*n.^4;Icl=p.gl*(v-p.vl);Ina=gna.*(v-p.vna);Ik=gk.*(v-p.vk);figure(1)plot(T,V ,'linewidth',2)axis([0 tend -20+p.Veq 120+p.Veq])xlabel('time (ms)','fontsize',20)ylabel('V (mV)','fontsize',20)box offformatSpecF = '%5.2f\n';title(strcat('I_{app}= ',sprintf(formatSpecF,p.Iapp)),'fontsize',18)figure(2)plot(T,m,'b',T,n,'r',T,h,'g',  'linewidth',2)legend('boxoff')legend('m(t)','n(t)','h(t)','fontsize',16)xlabel('time (ms)','fontsize',20)ylabel('Gating variables','fontsize',20)axis([0 tend 0 1])box offtitle(strcat('I_{app}= ',sprintf(formatSpecF,p.Iapp)),'fontsize',18)figure(3)plot(T, gk,T, gna)xlabel('time (ms)')ylabel('Conductance (mmho/cm^2)')box offlegend('boxoff')legend('g_K','g_{Na}')title(strcat('I_{app}= ',sprintf(formatSpecF,p.Iapp)),'fontsize',18)figure(4)plot(n,h,  'linewidth',2)xlabel('n','fontsize',18)ylabel('h','fontsize',18)end % of main%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% the right hand side for the simulation:function s_prime=deRHS(t,s,p)v = s(1)-p.Veq;m = s(2);h = s(3);n = s(4);AM=.1*(25.0001-v)./(exp(.1*(25.0001-v))-1.); % t0 avoid V=25BM=4.*exp(-v/18);AH=.07*exp(-v/20.);BH=1./(exp(.1*(30.-v))+1.);AN=.01*(10.0001-v)./(exp(.1*(10.0001-v))-1.);% to avoid V=10BN=.125*exp(-v/80.);Fm=AM*(1.-m)-BM*m;Fh=AH*(1.-h)-BH*h;Fn=AN*(1.-n)-BN*n;gna=p.gnabar*m.^3.*h;gk=p.gkbar*n.^4;Icl=p.gl*(v-p.vl);Fv = -gna*(v-p.vna)-gk*(v-p.vk)-Icl;s_prime = [Fv+p.Iapp Fm Fh Fn]';end