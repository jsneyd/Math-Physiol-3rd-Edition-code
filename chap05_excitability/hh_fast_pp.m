% %  -------------------------------------------------------------------%%   This computes the fast phase plane of the Hodgkin-Huxley model,%   with n and h fixed.%%   For Chapter 5, Fig. 5.7 of%   Keener and Sneyd, Mathematical Physiology, 3rd Edition, Springer.% %   Written by James Keener and James Sneyd% %  ------------------------------------------------------------------- clear allclose allclcset(0,                           ...   'defaultaxesfontsize', 20,   ...   'defaultaxeslinewidth', 2.0, ...   'defaultlinelinewidth', 2.0);formatSpecF = '%6.2f\n';p.Veq = 0; %is the original HH formulation%p.Veq = -65; % is the physiological formulationTfact = 1; % this is the correction factor for temperatures other that 6.3C%Tfact = 0.977 % correspnds to 0C%Tfact = 1.085 % corresponds to 30 C.p.gnabar = 120.;p.gkbar = 36;p.gl = 0.3;% p.gkbar=0; %to shut down currents% p.gl = 0;Vna0 = 115;Vk0=-12;Vl0=10.5988;p.Vna = Tfact*(Vna0+p.Veq) - p.Veq;p.Vk = Tfact*(Vk0+p.Veq)-p.Veq;p.Vl = Tfact*(Vl0+p.Veq)-p.Veq;h0 = 0.5961;n0 = 0.3177;p.Iapp=-2; %p.Iapp is the amplitude of the steady current stimulusp.Iapp=0;% start by plotting nullclinesVm = [-20:0.1:120];AM=.1*(25.-Vm)./(exp(.1*(25.-Vm))-1.);BM=4.*exp(-Vm/18);Minf=AM./(AM+BM);M=[0:.001:1];gk=p.gkbar*n0.^4;gna=p.gnabar*M.^3.*h0;Vs= (gna.*p.Vna +gk.*p.Vk +p.gl*p.Vl + p.Iapp)./(gna+gk+p.gl);%Vs =(p.Iapp+gna*p.Vna +gk*p.Vk +p.gl*p.Vl)./(gna+gk+p.gl);%this is the dv/dt=0 curvefigure(1)plot(Vm,Minf,'b',Vs,M,'g')xlabel('V')ylabel('m')box offaxis([-10 120 0 1])annotation('arrow',[0.34 0.4],[0.6 0.6])text(3,0.6,'dm/dt=0','fontsize',18)annotation('arrow',[0.5 0.5],[0.26 0.34])text(45,0.11,'dv/dt=0','fontsize',18)annotation('arrow',[0.6 0.7],[0.52 0.6])hold on figure(2)plot(Vm,Minf,'b',Vs,M,'g')xlabel('V')ylabel('m')axis([-10 10 0 0.2])box offhold on p.Inp = 0;;  % this is the amplitude of the initial input stimulus%p.Inp = 3.5;%p.Inp = 13.4; p.BCL = 39;p.BCL = 0;tstep = .01;t_end = 10;V = 6.5098;  %The voltage threshold% add some trajectoriesvlist=[10,7,-5,-5,8.29099503,-5];mlist=[0,0,0.22,.24,0,0.2308685]for j = 1:length(vlist)    %initial data %specify the output pointstspan = [0:tstep:t_end];s0 = [vlist(j);mlist(j);h0;n0];[T,S] = ode23(@(t,x)deRHS(t,x,p),tspan, s0, odeset('maxstep',1));  V = S(:,1);m = S(:,2);h = S(:,3);n = S(:,4); figure(1)plot(V,m,'r','linewidth',2) title(strcat('I_{app} = ',sprintf(formatSpecF,p.Iapp)),'fontsize',18)figure(2)plot(V,m,V(end),m(end),'*','linewidth',2)axis([-10 10 0 0.2]) title(strcat('I_{app} = ',sprintf(formatSpecF,p.Iapp)),'fontsize',18) endfigure(1)hold offfigure(2)hold off%% the right hand side for the simulation:function s_prime=deRHS(t,s,p) %the original HH formulation has V = s(1)-p.Veq;m = s(2);h = s(3);n = s(4); Input = p.Inp/cosh(mod(t,p.BCL)-p.BCL/10) +p.Iapp; AM=.1*(25.-V)./(exp(.1*(25.-V))-1.);BM=4.*exp(-V/18);AH=.07*exp(-V/20.);BH=1./(exp(.1*(30.-V))+1.);AN=.01*(10.-V)./(exp(.1*(10.-V))-1.);BN=.125*exp(-V/80.);Minf = AM./(AM+BM);Fm=AM*(1.-m)-BM*m;%Fh=AH*(1.-h)-BH*h;Fh=0;%Fn=AN*(1.-n)-BN*n;Fn=0;gna=p.gnabar*m.^3.*h;%gnainf=gnabar*Minf.^3.*h;gk=p.gkbar*n.^4;Icl=p.gl*(V-p.Vl);Fv = -gna*(V-p.Vna)-gk*(V-p.Vk)-Icl;s_prime = [Fv+Input Fm Fh Fn]';end 