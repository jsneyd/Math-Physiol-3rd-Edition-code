% Here we plot the nullclines for the rHH equations for several values of% temperature function rHH_solverglobal gnabar gkbar gl vna vk vl Iapp rn0  BCLset(0,                           ...   'defaultaxesfontsize', 20,   ...   'defaultaxeslinewidth', 2, ...   'defaultlinelinewidth', 2.0);   %parameters% set parameters  Veq = -65; % is the physiological formulation resting potential  Tmin = -273.15;  % absolute zero temperatureTc = 6.3; %the temperature for the original HH model % pick a temperature for this simulation Templist = [6.3,0,30]; %These are the Nernst potentials:VNa = 50; % the sodium Nernst potentialVK = -77;  % the potassium Nernst potentialVL = -54.4;  % the leak Nernst potentialfor nTmps= 1:length(Templist) % for a list of temperatures Temp = Templist(nTmps);      Tfact=(Temp-Tmin)/(6.3-Tmin);% temperature correction factor for Nernst potentials%the driving force for the currents are the Nernst potentials shifted by Veq vna = Tfact*VNa -  Veq; vk = Tfact*VK- Veq; vl = Tfact*VL - Veq; gnabar = 120.;gkbar = 36;gl = 0.3; rn0 = 0.8;%rn0 = 0.9;BCL = 0;% pick a value of Iapp Iplist=[0,50,120];Ipj = 1;     Iapp = Iplist(Ipj); %  find the v nullcline by bisectionvlist = linspace(vk+.01,vna-0.5,100);% list of v values to use; avoid exactly vk and exactly Vna[n0 ,ninf]=get_nullclines(vlist);  % save n0 for plotting n0sv(:,nTmps)=n0'; vlsv(:,nTmps) = vlist';endformatSpecF = '%5.2f\n'; % the phase portraitfigure(1)plot(vlsv(:,1),n0sv(:,1),vlsv(:,2),n0sv(:,2),vlsv(:,3),n0sv(:,3),vlist,ninf,'k', 'linewidth',2)  xlabel('v')ylabel('n')legend('T=0','T=6.3','T=30','fontsize',18) text(70,.72,'dv/dt=0','fontsize',18) text(70,0.89,'dn/dt=0','fontsize',18)title(strcat('I_{app}= ',sprintf(formatSpecF,Iapp)),'fontsize',18)box off%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%the right hand side for ode simulation:function s_prime=deRHS(t,s)global gnabar gkbar gl vna vk vl Iapp BCL rn0v = s(1);n = s(2);% If there is a stimulus, add itIstim = (BCL>0)*Iapp/cosh(mod(t,BCL)-BCL/4) + (BCL==0)*Iapp; Gt= gate_de(v);AM=Gt(1);BM = Gt(2);AN = Gt(3);BN = Gt(4); h = rn0 - n;aminf = AM/(AM+BM); Ina = gnabar*aminf.^3.*h.*(v-vna) ;Ik = gkbar*n.^4*(v-vk);Icl = gl*(v-vl);      Fv = -Ina-Ik-Icl;Fw=AN*(1.-n)-BN*n;s_prime = [Fv+Istim Fw]';%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [n0,ninf]= get_nullclines(vlist)global v  % for each v in vlist find f(v,n) = 0 by bisection  for j = 1:length(vlist)    v=vlist(j); % guess a lower bound a = 0;% guess an upper boundb = 1;%this is the answer - call the function bisect(a,b,@fval)n0(j)= bisect(a,b,@feval); Gt= gate_de(v);AN = Gt(3);BN = Gt(4);ninf(j) = AN/(AN+BN);    end %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function fn = feval(n)global v% evaluate the functions=[v,n]; t=0;fhh= deRHS(t,s);  % use the rhs of the defn=fhh(1); %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function gate = gate_de(v) % calculate the gating functions for V                 AM=.1*(25.-v)./(exp(2.5 -0.1*v)-1.);BM=4.*exp(-v/18.);AN=.01*(10.-v)./(exp(1.-0.1*v)-1.);BN=.125*exp(-v/80.);gate = [AM BM AN BN];%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function root = bisect(a,b,feval)ul = a;fl = feval(ul);uu = b;fu = feval(uu);% we make the assumption, without checking, that % fu*fl<0% if not, the algorithm fails to find a root.N = 20;  % number of iterates% the main bisection algorithmfor jk = 1:Nuc = (ul+uu)/2;fc = feval(uc);ftest = (fc.*fl>0);ul = ftest.*uc+(1-ftest).*ul;fl = ftest.*fc + (1-ftest).*fl;uu = (1-ftest).*uc+ ftest.*uu;fu = (1-ftest).*fc + ftest.*fu;endroot = uc; 