%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Matlab code used to   solve the steady state system of diffusion-advection-reaction
% for 5 species
% sodium, hydrogen, chloride, bicarbonate and carbon dioxide
% electrodiffusion with one Dirichlet boundary condition and one Robin
% condition using Matlab function fsolve

%The original code tried to use a non-uniform grid , but doesn't work (yet).

%This code uses a uniform grid and removes all mention of the nonuniform grid possibility


% For Chapter 18, Section 18.6.2 of
% Keener and Sneyd, Mathematical Physiology, 3rd Edition, Springer.

% Written by James Keener and James Sneyd

%-------------------------------------------------------------------
clear all
close all
clc
 
set(0,                           ...
   'defaultaxesfontsize', 20,   ...
   'defaultaxeslinewidth', 2.0, ...
   'defaultlinelinewidth', 2.0, ...
   'defaultpatchlinewidth', 0.7);
global N Amh Amn Amc Amb Amco2 ATmnh  ATmhn ATmcb ATmbc Dh Dn Dc Db Dco2
global km  kp  Hb Nb Cb Bb Co2b Um denom
global  zs Hj delj  fn 
 
  formatSpecF = '%3.0f\n';
L =0.05; % length of the domain units cm
Lm = 0.75; % length of the mucus gel region
% there are 5 diffusion coefficients
Dh =  7e-5; %cm^2/s% hydrogen
Dn = 2.46e-5; % sodium
Db =1.78e-5;  % bicaarbonate
Dc = 2.13e-5; %chloride
Dco2 = 1.98e-5; % carbon dioxide

zs =[1,1,-1,-1,0]; % charges on ions

kp = 2.6e3 ;% or  2.6e10mM^(-1) s^(-1) % hydrogen-bicarbonate reaction rate = k_+ in text
km = 0; %11; %s^(-1) % carbon dioxide dissociation rate = k_- in text,  
KBC =  2e-1; % bicarbonate-chloride exchanger permeability
   %  Hydrogen-sodium exchanger permeability:
 KHN = 2e-1;

delHN= 1.e5;
delBC = 10;

% lumenal concentrations
M0 = 134; % mM
M0 = 40;

% boundary values at x=L;
Hb = 100; %mM hydrogen

Bb = 0; % no bicarbonate at the righthand boundary
Co2b = 0; % assume carbon dioxide is taken out

N=50;    % total number of spatial grid points,
% number of unknowns is 6N
%phi_j at xj
%u_j at yj = xj+hj/2% u1 is considered a ghost point on the exterior of the left boundary,
% the right boundary condition is applied at y_(N+1)

%specify the grid

hj =ones(1,N); %uniform grid step size
 HT = N-1/2;  % use N-1 hj's = 1/2 to form grid for unknowns
Hj = L/HT; % rescale to correct length
  % add the ghost point
xj = Hj*[0,cumsum(hj(2:N))];  %these are the N grid points where phi is specified

yj = [-Hj /2,xj+Hj/2 ]; %these are the grid points (the midpoiints) where u (including the ghost point) is unknown
% plus an extra point for the boundary condition
 delj =Hj % distance between midpoints
 
 denom = delj^2 ; %this is the denominator for the diffusion operator

X = xj(1:N) ;% N interior grid points, including x=0, where phi is unknown
Y = yj(1:N) ; %these are the locations where concentrations are unknown
  Um = M0*(1-tanh((Y-Lm)/0.1) )/2;  % mucus charge/binding site distribution

Umb = M0*(1-tanh((L-Lm)/0.1) )/2 ;  
 
% in this code the mucus is charged but there is no binding with hydrogen.
% This could easily be added
 
% form the 5 main diffusion matrices, which are independent of unknowns

% diffusion operator for H
 
 ATmh = [-Dh/Hj-KHN*delHN/2;-2*Dh*ones(N-1,1)/denom];  %main diagonal
 AThup = [Dh/Hj-KHN*delHN/2;Dh* ones(N-2,1)/denom ] ;%upper diagonal
AThoff = Dh*ones(N-1,1)/denom  ;%lower diagonal
Amh= diag(ATmh) +diag(AThup,1) + diag(AThoff,-1);
  
ATmhn = zeros(N,N);
ATmhn(1,1) = KHN/2;  % boundary flux for hydrogen depends on sodium
ATmhn(1,2) = KHN/2;

% diffusion operator for Na

ATmn = [-Dn/Hj-KHN/2;-2*Dn*ones(N-1,1)/denom];  %main diagonal
ATnup = [Dn/Hj-KHN/2;Dn* ones(N-2,1)/denom ]; %upper diagonal
ATnoff = Dn*ones(N-1,1)/denom ;  % lower diagonal
Amn= diag(ATmn) +diag(ATnup,1) + diag(ATnoff,-1);% diffusion operator for Na

ATmnh = zeros(N,N);
ATmnh(1,1) = KHN*delHN/2;  % boundary flux for sodium depends on hydrogen
ATmnh(1,2) = KHN*delHN/2;

% diffusion operator for chloride

ATmc = [-Dc/Hj-KBC/2;-2*Dc*ones(N-1,1)/denom];  %main diagonal 
ATcup = [Dc/Hj-KBC/2;Dc*ones(N-2,1)/denom ]; %upper diagonal
ATcoff = Dc*ones(N-1,1)/denom;  %lower diagonal
Amc= diag(ATmc) +diag(ATcup,1) + diag(ATcoff,-1) ; % diffusion operator for Cl
 
ATmcb = zeros(N,N);
ATmcb(1,1) = KBC*delBC/2; % boundary flux for chloride depends on bicarbonate
ATmcb(1,2) = KBC*delBC/2;

% diffusion operator for bicarbonate 

ATmb = [-Db/Hj-KBC*delBC/2;-2*Db*ones(N-1,1)/denom];
ATbup = [Db/Hj-KBC*delBC/2;Db*ones(N-2,1)/denom ];
ATboff = Db*ones(N-1,1)/denom;
Amb= diag(ATmb) +diag(ATbup,1) + diag(ATboff,-1);  % diffusion operator for bicarbonate

ATmbc = zeros(N,N);
ATmbc(1,1) = KBC/2;  %boundary flux for bicarbonate depends on chloride
ATmbc(1,2) = KBC/2;

% diffusion operator for CO2

ATmco2 = [-Dco2/Hj;-2*Dco2*ones(N-1,1)/denom];
ATco2up = [Dco2/Hj; Dco2*ones(N-2,1)/denom ];
ATco2off =Dco2*ones(N-1,1)/denom;
Amco2= diag(ATmco2) +diag(ATco2up,1) + diag(ATco2off,-1);  % diffusion operator for CO2
 
 
% choose a level of Na(L):
plotlist = [5,200,300];  %values of Nb to make plots
nk=1;
Nblist=[0:5:300];

for k = 1:length(plotlist)
    mdx(k) = find(Nblist==plotlist(k));
end
%mdx  is the list of j values for which to make plots
nfig = 0;

 % now find the solution for a list of Nb values
for j = 1:length(Nblist)
Nb = Nblist(j);
j
Nb
fn = 0;
Cb = Hb+Nb-Umb-Bb;
% initial guess
 % be sure all concentrations are positive!
Uh0 = Hb+2000*(Y-L)';  %H0*ones(N,1);
Un0 = Nb+(60-Nb)*(L-Y)'/L;
Ub0 =  zeros(N,1); % ;
Uc0 = Un0 + Uh0 - Ub0 - Um';  % guarantees electroneutrality
Uco20 = Co2b* ones(N,1);
phi0 =  2*ones(N,1);


Uslv0 = [Uh0;Un0; Ub0;Uco20;phi0];  % initial guess for the solution
if (j>1)
    Uslv0=Uslv;
end

% now call fsolve
Uslv = fsolve(@feval, Uslv0);
fn
Uh = Uslv(1:N);
Un = Uslv(N+1:2*N);
Ub = Uslv(2*N+1:3*N);
Uco2 = Uslv(3*N+1:4*N);
phi = Uslv(4*N+1:5*N);
Uc = Un + Uh - Ub - Um' ;
Uhavg=Avg(Uh,Hb);
pHsv(j) =  -log10(Uhavg(1)*1.e-3);
Unavg = Avg(Un,Nb);
Unsv(j) = Unavg(1);

if (j==mdx(nk))  %make plots for this value of Nb
    nk=nk+1;
    
nfig=nfig+1;
figure(nfig)
plot(Y,Uh0,Y,Un0, Y,Uc0,'--',Y,Ub0,Y,Uco20,'--','linewidth',2)
title('initial guess','fontsize',20)
xlabel('X (cm)','fontsize',20)
legend('H^+','Na^+','Cl^-','HCO_3^-','CO_2')
 box off
 
  resid = feval(Uslv0);
 rs = reshape(resid,N,5);

 nfig=nfig+1;
 figure(nfig)
 plot(X,log10(abs(rs)))
ylabel('log_{10}(residual)')
legend('H^+','Na^+','Cl^-','HCO_3^-','CO_2')
xlabel('X (cm)','fontsize',20)
title(strcat('initial residual'))
  
nfig=nfig+1;
figure(nfig)
plot(X,Avg(Uco2,Co2b),'--',X,Avg(Uh,Hb),X,Avg(Un,Nb),X,Avg(Uc,Cb),  X,Avg(Ub,Bb), 'linewidth',2)
%writematrix([X' Avg(Uh,Hb) Avg(Un,Nb) Avg(Uc,Cb) Avg(Ub,Bb) Avg(Uco2,Co2b)],"electrodiff.dat") % for external plotting
 xlabel('X (cm)','fontsize',20)
 legend('boxoff')
legend('[CO_2]','[H^+]','[Na^+]','[Cl^-]','[HCO_3^-]','location','north','fontsize',14 )


title(strcat('Na_b = ',sprintf(formatSpecF,Nb),' mM'))
ylabel('Concentrations (mM)','fontsize',20)
 box off

 nfig=nfig+1;
figure(nfig)
 plot(X,phi,'linewidth',2)
xlabel('X (cm)','fontsize',20)
ylabel('\phi (dimensionless)','fontsize',20)
title(strcat('Na_b = ',sprintf(formatSpecF,Nb),' mM'))

box off
FluxH = Dh*Flux(Uh,phi,zs(1), Hb) ;
 FluxN = Dn*Flux(Un,phi,zs(2), Nb) ;
 FluxC = Dc*Flux(Uc,phi,zs(3), Cb) ;
 FluxB = Db*Flux(Ub,phi,zs(4), Bb) ;

 nfig=nfig+1;
 figure(nfig)
 plot(X,-FluxH,X,-FluxN,X,-FluxC,'--',X,-FluxB,'--','linewidth' ,2)
 %plot( X,-FluxC,X,-FluxB,'linewidth' ,2)
 legend( 'FluxH','FluxN','FluxC','FluxB')
 title(strcat('Na_b = ',sprintf(formatSpecF,Nb),' mM'))

xlabel('X (cm)','fontsize',20)
box off

nfig=nfig+1;
 figure(nfig)

 plot(X,-log10(Avg(Uh,Hb)*1.e-3),'linewidth',2)
 box off
% writematrix([X' -log10(Avg(Uh,Hb)*1.e-3)],"electrodiff.dat") % for external plotting
title(strcat('Na_b = ',sprintf(formatSpecF,Nb),' mM'))
xlabel('X (cm)','fontsize',20)
ylabel('pH','fontsize',20)
 resid = feval(Uslv);
 rs = reshape(resid,N,5);

 nfig=nfig+1;
 figure(nfig)
 plot(X,log10(abs(rs)))
ylabel('log_{10}(residual)')
legend('H^+','Na^+','Cl^-','HCO_3^-','CO_2')
xlabel('X (cm)','fontsize',20)
title(strcat('Na_b = ',sprintf(formatSpecF,Nb),' mM'))

end

end
nfig=nfig+1;
figure(nfig)
 
plot(Nblist,pHsv);
xlabel('Na_b')
ylabel('pH')
box off

nfig=nfig+1;
figure(nfig)
plot(Nblist,Unsv);
xlabel('Na_b')
ylabel('Na(0)')
box off




function resid = feval(Uslv)
global N Amh Amn Amc Amb Amco2 ATmnh  ATmhn ATmcb ATmbc Dh Dn Dc Db Dco2
global km kp Hb Nb Cb Bb Co2b Um denom Afull
global   zs fn   

fn = fn +1;

Uh = Uslv(1:N);  %hydrogen
Un = Uslv(N+1:2*N); %sodium
Ub = Uslv(2*N+1:3*N); %bicarbonate
Uco2 = Uslv(3*N+1:4*N); %CO2
phi = Uslv(4*N+1:5*N);
Uc = Un + Uh - Ub - Um' ; %   %Chloride:  guarantees electroneutrality

% evaluate the function using
 %  Uh, Un, Uc, Ub, and phi values
Avgh = Avg(Uh,Hb);
Avgn = Avg(Un,Nb);
Avgc = Avg(Uc,Cb);
Avgb = Avg(Ub,Bb);

Hgrad = Dh*Grad(Avgh);
Ngrad = Dn*Grad(Avgn);
Cgrad = Dc*Grad(Avgc);
Bgrad = Db*Grad(Avgb);

%CO2grad does not contribute since CO2 is neutral charge

Afull= [[Amh,ATmhn,zeros(N,N),diag([0;km*ones(N-1,1)]),zs(1)*Hgrad]; ...% hydrogen
    [ATmnh,Amn,zeros(N,2*N),  zs(2)*Ngrad];  ... % sodium
    [zeros(N,2*N),ATmcb,zeros(N,N),zs(3)*Cgrad]; ...% chloride
    [zeros(N,2*N),Amb, diag([0;km*ones(N-1,1)]),zs(4)*Bgrad]; ...% bicarbonate
    [zeros(N,3*N),Amco2-diag([0;km*ones(N-1,1)]),zeros(N,N)]]; ...% carbon dioxide


B = [zeros(2*N,N);Amc;ATmbc;zeros(N,N)];
 % now evaluate the  reaction terms

 Rhs = zeros(5*N,1);

%  hydrogen-bicarbonate reaction disocciation is in the matrix Afull
Rhs(2:N) = kp*Uh(2:N).*Ub(2:N); % hydrogen-bicarbonate reaction
Rhs(N) = Rhs(N) - Dh*Hb./denom;
Rhs(2*N) = - Dn*Nb./denom ;  % right BC for sodium
Rhs(3*N) = - Dc* Cb./denom;% right BC for chloride

Rhs(3*N+2:4*N) = kp*Uh(2:N).*Ub(2:N) ;% hydrogen-bicarbonate reaction
Rhs(4*N) = Rhs(4*N) - Db* Bb/denom;   % hydrogen-bicarbonate reaction
Rhs(4*N+2:5*N) =  -kp*Uh(2:N).*Ub(2:N);
Rhs(5*N) = Rhs(5*N)- Dco2* Co2b./denom;
 
 
 resid = Afull*Uslv+B*Uc-Rhs;
 
end

function out = Avg(U,Ub)
global N  
 
out = ( U  +[U(2:N);Ub])/2;

end

function out = Grad(Avg)
global N Hj 

out = ( diag(Avg)-diag(Avg(1:N-1),-1))/Hj;

end

function out = Flux(U,phi,zi, Ub)
global delj N
Uv = Avg(U,Ub);
Upr = ([U(2:N);Ub]-U)./delj;
out =  Upr +zi*Uv.*phi;

end

