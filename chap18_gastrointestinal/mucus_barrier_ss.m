%    -------------------------------------------------------------------%% This file solves the steady state system of diffusion-advection-reaction% for 5 species% sodium, hydrogen, chloride, bicarbonate and carbon dioxide% electrodiffusion with one dirichlet boundary condition and one Robin% condition using Matlab function fsolve %% Here we try a nonuniform grid to deal with the boundary layer at x=0.%%     For Chapter 18, Section 18.6.2 of%     Keener and Sneyd, Mathematical Physiology, 3rd Edition, Springer.%%     Written by James Keener and James Sneyd.%%    -------------------------------------------------------------------function mucus_barrier_ssclose allclear allclcset(0,                           ...'defaultaxesfontsize', 20,   ...'defaultaxeslinewidth', 1.2, ...'defaultlinelinewidth', 2.0, ...'defaultpatchlinewidth', 0.7);global N Amh Amn Amc Amb Amco2 ATmnh  ATmhn ATmcb ATmbc Dh Dn Dc Db Dco2global kmb kb Hb Nb Cb Bb Co2b Um denom  global  zs hj deljL =0.05; % length of the domain units cmLm = 0.75; % length of the mucus gel region% there are 5 diffusion coefficientsDh =  7e-5; %cm^2/s% hydrogenDn = 2.46e-5; % sodiumDb =1.78e-5;  % bicaarbonateDc = 2.13e-5; %chlorideDco2 = 1.98e-5; % carbon dioxidezs =[1,1,-1,-1,0]; % charges on ionskb = 2.6e3 ;% or  2.6e10mM^(-1) s^(-1) % hydrogen-bicarbonate reaction ratekmb = 11; %s^(-1) % carbon dioxide dissociation rateKBC =  2e-1; % bicarbonate-chloride exchanger permeability%  Hydrogen-sodium exchanger permeability:KHN = 2e-1;delHN= 1.e5;delBC = 10;% lumenal concentrationsM0 = 134; % mMM0 = 40;% boundary values at x=L;Hb = 100; %mM  %%%  Choose the value of Nb you want    Nb = 5;% mM    %Nb = 200;%%%Bb = 0; % no bicarbonate at the righthand boundaryCo2b = 0; % assume carbon dioxide is taken out N=60;    % total number of spatial grid points,  % number of unknowns is 6N%phi_j at xj%u_j at yj = xj+hj/2% u1 is considered a ghost point on the exterior of the left boundary,% the right boundary condition is applied at y_(N+1)%specify the gridhj =ones(1,N); %uniform grid% or non-uniform grid:% hj = tanh([1:N]/(0.25*N));  % there are N-1 gaps, but N hj's% non-uniform grid  has bugs, does not give the correct answer% uniform grid gives good answersHT = sum(hj(1:N-1))+hj(N)/2;  % use N-1 hj's = 1/2 for form grid for unknownsHj = L*hj/HT; % rescale to correct length hj = [Hj(1),Hj]; % add the ghost pointxj = [0,cumsum(hj(2:N))];  %these are the N grid points where phi is specifiedyj = [-hj(1)/2,xj+hj(2:N+1)/2 ]; %these are the grid points where u (including the ghost point) is unknown% plus an extra point for the boundary conditiondelj = yj(2:N+1) - yj(1:N) ; % distance between midpointshj=hj';delj = delj';djs = delj(1:N-1)+delj(2:N);denom = delj(1:N-1).*delj(2:N).*djs/2 ; %this is the denominator for the diffusion operatorX = xj(1:N); % N interior grid points, including x=0, where phi is unknownY = yj(1:N); % these are the locations where concentrations are unknownUm = M0*(1-tanh((Y-Lm)/0.1) )/2;  % mucus charge/binding site distributionUmb = M0*(1-tanh((L-Lm)/0.1) )/2 ;% enforce electroneutrality  at x=LCb = Hb+Nb-Umb-Bb;% initial guesses% be sure all concentrations are positive! Uh = Hb+2000*(X-L)';  %H0*ones(N,1);Un = Nb+1000*(L-X)';Ub =  zeros(N,1); % ;Uc = Un + Uh - Ub - Um';  % guarantees electroneutralityUco2 = Co2b* ones(N,1);phi =  2*ones(N,1);Uslv0 = [Uh;Un; Ub;Uco2;phi];  % initial guess for the solutionfigure(1)    plot(Y,Uh,Y,Un, Y,Uc,'--',Y,Ub,Y,Uco2,'--',Y,Um,X,phi,'*','linewidth',2)    title('initial guess','fontsize',20)    xlabel('X (cm)','fontsize',20)    legend('H^+','Na^+','Cl^-','HCO_3^-','CO_2')% form the 5 main diffusion matrices, which are independent of unknownsATmh = [-Dh/hj(1)-KHN*delHN/2;-Dh*djs./denom];AThup = [Dh/hj(1)-KHN*delHN/2;Dh*delj(2:N-1)./denom(1:N-2)];AThoff = Dh*delj(1:N-1)./denom(1:N-1);Amh= diag(ATmh) +diag(AThup,1) + diag(AThoff,-1);% diffusion operator for hATmhn = zeros(N,N);ATmhn(1,1) = KHN/2;  % flux for hydrogen depends on sodiumATmhn(1,2) = KHN/2;ATmn = [-Dn/hj(1)-KHN/2;-Dn*djs./denom];ATnup = [Dn/hj(1)-KHN/2;Dn*delj(1:N-2)./denom(1:N-2)];ATnoff = Dn*delj(2:N)./denom(1:N-1);Amn= diag(ATmn) +diag(ATnup,1) + diag(ATnoff,-1);% diffusion operator for NaATmnh = zeros(N,N);ATmnh(1,1) = KHN*delHN/2;  % flux for sodium depends on hydrogenATmnh(1,2) = KHN*delHN/2;ATmc = [-Dc/hj(1)-KBC/2;-Dc*djs./denom];ATcup = [Dc/hj(1)-KBC/2;Dc*delj(1:N-2)./denom(1:N-2)];ATcoff = Dc*delj(2:N)./denom(1:N-1);Amc= diag(ATmc) +diag(ATcup,1) + diag(ATcoff,-1);  % diffusion operator for ClATmcb = zeros(N,N);ATmcb(1,1) = KBC*delBC/2;ATmcb(1,2) = KBC*delBC/2;ATmb = [-Db/hj(1)-KBC*delBC/2;-Db*djs./denom];ATbup = [Db/hj(1)-KBC*delBC/2;Db*delj(1:N-2)./denom(1:N-2)];ATboff = Db*delj(2:N)./denom(1:N-1);Amb= diag(ATmb) +diag(ATbup,1) + diag(ATboff,-1);  % diffusion operator for bicarbonateATmbc = zeros(N,N);ATmbc(1,1) = KBC/2;ATmbc(1,2) = KBC/2;ATmco2 = [-Dco2/hj(1);-Dco2*djs./denom];ATco2up = [Dco2/hj(1); Dco2*delj(1:N-2)./denom(1:N-2)];ATco2off =Dco2*delj(2:N)./denom(1:N-1);Amco2= diag(ATmco2) +diag(ATco2up,1) + diag(ATco2off,-1);  % diffusion operator for CO2% now call fsolveUslv = fsolve(@feval, Uslv0);Uh = Uslv(1:N);Un = Uslv(N+1:2*N);Ub = Uslv(2*N+1:3*N);Uco2 = Uslv(3*N+1:4*N);phi = Uslv(4*N+1:5*N);Uc = Un + Uh - Ub - Um' ;figure(2)    plot(Y,Uh,Y,Un,  Y,Uc, '--', Y,Ub,'--',Y,Uco2,'linewidth',2)    xlabel('X (cm)','fontsize',20)    legend('H^+','Na^+','Cl^-','HCO_3^-','CO_2' )    ylabel('Concentrations (mM)','fontsize',20)figure(3)    plot(X,Avg(Uh,Hb),X,Avg(Un,Nb),X,Avg(Uc,Cb),'--', X,Avg(Ub,Bb),'--',X,Avg(Uco2,Co2b),'linewidth',2)    xlabel('X (cm)','fontsize',20)    legend('H^+','Na^+','Cl^-','HCO_3^-','CO_2' )    formatSpecF = '%3.0f\n';    title(strcat('Na_b = ',sprintf(formatSpecF,Nb),' mM'))    ylabel('Concentrations (mM)','fontsize',20)    %writematrix([X' Avg(Uh,Hb) Avg(Un,Nb) Avg(Uc,Cb) Avg(Ub,Bb) Avg(Uco2,Co2b)],'mucus_ss.dat')figure(4)    plot(X,phi,'linewidth',2)    xlabel('X (cm)','fontsize',20)    ylabel('\phi (dimensionless)','fontsize',20)FluxH = Dh*Flux(Uh,phi,zs(1), Hb) ;FluxN = Dn*Flux(Un,phi,zs(2), Nb) ;FluxC = Dc*Flux(Uc,phi,zs(3), Cb) ;FluxB = Db*Flux(Ub,phi,zs(4), Bb) ;figure(5)    plot(X,-FluxH,X,-FluxN,X,-FluxC,'--',X,-FluxB,'--','linewidth' ,2)    %plot( X,-FluxC,X,-FluxB,'linewidth' ,2)    legend( 'FluxH','FluxN','FluxC','FluxB')    xlabel('X (cm)','fontsize',20)figure(6)    plot(X,-log10(Avg(Uh,Hb)*1.e-3),'linewidth',2)    xlabel('X (cm)','fontsize',20)    ylabel('pH','fontsize',20)    resid = feval(Uslv);    rs = reshape(resid,N,5);figure(7)    plot(X,log(abs(rs)))    ylabel('log(residual)')    legend('H^+','Na^+','Cl^-','HCO_3^-','CO_2')    xlabel('X (cm)','fontsize',20)end % of main%%function resid = feval(Uslv)    global N Amh Amn Amc Amb Amco2 ATmnh  ATmhn ATmcb ATmbc Dh Dn Dc Db Dco2    global kmb kb Hb Nb Cb Bb Co2b Um denom Afull    global   zs hj delj         Uh = Uslv(1:N);    Un = Uslv(N+1:2*N);    Ub = Uslv(2*N+1:3*N);    Uco2 = Uslv(3*N+1:4*N);    phi = Uslv(4*N+1:5*N);    Uc = Un + Uh - Ub - Um' ; % guarantees electroneutrality         % evaluate the function using      %  Uh, Un, Uc, Ub, and phi values     Avgh = Avg(Uh,Hb);    Avgn = Avg(Un,Nb);    Avgc = Avg(Uc,Cb);     Avgb = Avg(Ub,Bb);          Hgrad = Dh*Grad(Avgh);     Ngrad = Dn*Grad(Avgn);    Cgrad = Dc*Grad(Avgc);    Bgrad = Db*Grad(Avgb);         %CO2grad = 0 since CO2 is neutral charge         Afull= [[Amh,ATmhn,zeros(N,N),diag([0;kmb*ones(N-1,1)]),zs(1)*Hgrad]; ...% hydrogen        [ATmnh,Amn,zeros(N,2*N),  zs(2)*Ngrad];  ... % sodium        [zeros(N,2*N),ATmcb,zeros(N,N),zs(3)*Cgrad]; ...% chloride        [zeros(N,2*N),Amb, diag([0;kmb*ones(N-1,1)]),zs(4)*Bgrad]; ...% bicarbonate        [zeros(N,3*N),Amco2-diag([0;kmb*ones(N-1,1)]),zeros(N,N)]]; ...% carbon dioxide              B = [zeros(2*N,N);Amc;ATmbc;zeros(N,N)];     % now evaluate the  reaction terms    Rhs = zeros(5*N,1);         Rhs(2:N-1) = kb*Uh(2:N-1).*Ub(2:N-1);    Rhs(N) = - Dh*delj(N)*Hb./denom(N-1)+kb*Uh(N)*Ub(N);    Rhs(2*N) = - Dn*delj( N)*Nb./denom(N-1);  % right BC for sodium    Rhs(3*N) = - Dc*delj( N)*Cb./denom(N-1);% right BC for chloride         Rhs(3*N+2:4*N-1) = kb*Uh(2:N-1).*Ub(2:N-1) ;    Rhs(4*N) = - Db*delj(N)*Bb./denom(N-1)  +kb*Uh(N)*Ub(N) ;    Rhs(4*N+2:5*N-1) =  -kb*Uh(2:N-1).*Ub(2:N-1);    Rhs(5*N) = - Dco2*delj(N)*Co2b./denom(N-1) -kb*Uh(N).*Ub(N);          resid = Afull*Uslv+B*Uc-Rhs;  end%%function out = Avg(U,Ub)    global N hj delj    out = ( hj(2:N+1).*U +hj(1:N).*[U(2:N);Ub])./(2*delj);end%%function out = Grad(Avg)    global N hj     out = [ diag([Avg(1); Avg(2:N)./hj(1:N-1)])]-[diag(Avg(1:N-1)./hj(1:N-1),-1)];end%%function out = Flux(U,phi,zi, Ub)    global delj N    Uv = Avg(U,Ub);    Upr = ([U(2:N);Ub]-U)./delj;    out =  Upr +zi*Uv.*phi;end